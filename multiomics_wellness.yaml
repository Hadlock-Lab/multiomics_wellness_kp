openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: JIWEN XIN
    x-id: https://github.com/kevinxin90
    x-role: responsible developer
  description: Documentation of the Multiomics Wellness KP query web services.
  termsOfService: https://biothings.io/about
  title: Multiomics Wellness KP API
  version: '1.1'
  x-translator:
    infores: "infores:biothings-multiomics-wellness"
    component: KP
    team:
    - Multiomics Provider
    - Service Provider
    biolink-version: "2.2.3"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/multiomics_wellness_kp
  x-maturity: production
- description: Production server
  url: https://biothings.ncats.io/multiomics_wellness_kp
  x-maturity: production
tags:
- name: protein
- name: chemical_substance
- name: association
- name: annotation
- name: query
- name: translator
- name: biothings
- name: biothings_graph
paths:
  /association:
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple association IDs separated by comma. Note
                    that currently we only take the input ids up to 1000 maximum,
                    the rest will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Association'
                type: array
          description: A list of matching association objects
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: For a list of association IDs, return the matching disease object
      tags:
      - association
  /association/{associationid}:
    get:
      parameters:
      - description: Retrieve association objects based on Association ID  Supports
          JSONP and CORS as well.
        example: HMDB:HMDB60038-biolink:correlated_with-KEGG.COMPOUND:C03045
        in: path
        name: associationid
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
          description: A matching association object
        '404':
          description: A response indicating an unknown association ID
      summary: Retrieve association objects based on ID
      tags:
      - association
  /metadata:
    get:
      parameters:
      - $ref: '#/components/parameters/callback'
        in: query
        name: callback
      responses:
        '200':
          description: KP metadata object
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  /metadata/fields:
    get:
      parameters:
      - $ref: '#/components/parameters/search'
        name: search
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/prefix'
        name: prefix
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          description: metadata fields object
      summary: Get metadata about the data fields available
      tags:
      - metadata
  /query:
    get:
      parameters:
      - description: Query string.
        example: subject.id:UniProtKB\:O96013
        in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/facet_size'
        name: facet_size
      - $ref: '#/components/parameters/sort'
        name: sort
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/facets'
        name: facets
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/from'
        name: from
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make queries and return matching association hits. Supports JSONP and
        CORS as well.
      tags:
      - query
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-MESH-related'
      # - $ref: '#/components/x-bte-kgs-operations/LOINC-MESH-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CAS'
      # - $ref: '#/components/x-bte-kgs-operations/NCIT-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CAS'
      # - $ref: '#/components/x-bte-kgs-operations/CHEBI-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-related'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-related'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-related'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-related'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CAS'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CAS'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-CAS'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-UniProtKB'
      # - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/CAS-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/CAS-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/CAS-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/CAS-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-CAS'
      - $ref: '#/components/x-bte-kgs-operations/CAS-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/CAS-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/MESH-LOINC'
      # - $ref: '#/components/x-bte-kgs-operations/MESH-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/MESH-KEGGCOMPOUND'
      # - $ref: '#/components/x-bte-kgs-operations/MESH-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-related'
      # - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-related'
      # - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-related'
      # - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-related'
      # - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGDRUG-related'
      # - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB-Rev'
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPOSTResult'
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Association:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - $ref: '#/components/schemas/Association'
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Association'
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-kgs-operations:
    LOINC-LOINC:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with 1742-6 (ALAT (SGPT))
        ##   should get 20448-7 (INSULIN)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-LOINC-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with 20448-7 (INSULIN)
        ##   should get 1742-6 (ALAT (SGPT))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-NCIT:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with 1742-6 (ALAT (SGPT))
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-NCIT-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with 2571-8 (TRIGLYCERIDES)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-CHEBI:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with 2160-0 (CREATININE ENZ, SER)
        ##   should get CHEBI:78053 (DPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-CHEBI-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with 2085-9 (HDL CHOL DIRECT)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-KEGGCOMPOUND:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 1742-6 (ALAT (SGPT))
        ##   should get C00025 (glutamate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-KEGGCOMPOUND-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 2345-7 (GLUCOSE)
        ##   should get C03079 (4-hydroxyglutamate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-PUBCHEM:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with 1742-6 (ALAT (SGPT))
        ##   should get 5283573 (N-stearoyl-sphinganine (d18:0/18:0)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-PUBCHEM-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with 2160-0 (CREATININE ENZ, SER)
        ##   should get 122198196 (6-hydroxyindole sulfate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-HMDB:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with 1742-6 (ALAT (SGPT))
        ##   should get HMDB00532 (N-acetylglycine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-HMDB-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with 13965-9 (HOMOCYSTEINE, SERUM)
        ##   should get HMDB00317 (2-hydroxy-3-methylvalerate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-CAS:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with 1751-7 (ALBUMIN)
        ##   should get 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-CAS-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get 1955-23-3 (3-hydroxypyridine sulfate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-KEGGDRUG:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with 62255-5 (LPIR_SCORE)
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-KEGGDRUG-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_DRUG
        ## example: replace {inputs[0]} with 44733-4 (Triglyceride HDL Ratio)
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NOTE: no LOINC-MESH, 1 record for LOINC-MESH-Rev
    LOINC-UniProtKB:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with 13965-9 (HOMOCYSTEINE, SERUM)
        ##   should get Q07325 (INF_Q07325)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-UniProtKB-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with 20448-7 (INSULIN)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-LOINC-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get 13964-2 (METHYLMALONIC ACID)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-LOINC-related-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with 13964-2 (METHYLMALONIC ACID)
        ##   should get 30522-7 (CRP HIGH SENSITIVITY)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-NCIT-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get C615 (LINOLEIC_ACID)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-NCIT-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: NCIT
    #     semantic: ClinicalFinding
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:ClinicalFinding
    #        AND _exists_:subject.NCIT
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/NCIT-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## NO LOINC-CHEBI-related, LOINC-CHEBI-related-Rev records
    LOINC-KEGGCOMPOUND-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get C00059 (sulfate*)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-KEGGCOMPOUND-related-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 13965-9 (HOMOCYSTEINE, SERUM)
        ##   should get C04230 (1-myristoyl-GPC (14:0))
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-PUBCHEM-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get 11425365 (ascorbic acid 3-sulfate*)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-PUBCHEM-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: "PUBCHEM.COMPOUND"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.PUBCHEM
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    LOINC-HMDB-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get HMDB11565 (1-palmitoleoylglycerol (16:1)*)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-HMDB-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: HMDB
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.HMDB
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/HMDB-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    LOINC-CAS-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with 47828-9 (ADIPONECTIN, SERUM)
        ##   should get 98930-66-6 (cis-4-decenoylcarnitine (C10:1))
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-CAS-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    LOINC-KEGGDRUG-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with 62238-1 (GFR, MDRD, AFRICAN AM)
        ##   should get D01085 (saccharin)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-KEGGDRUG-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: "KEGG.DRUG"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.KEGG_DRUG
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    LOINC-MESH-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: MESH
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:ChemicalEntity
           AND _exists_:object.MESH
        ## example: replace {inputs[0]} with 62238-1 (GFR, MDRD, AFRICAN AM)
        ##   should get D013482 (SUPEROX DISMUT SOD)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/MESH'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # LOINC-MESH-related-Rev:
    # - inputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: MESH
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:ChemicalEntity
    #        AND _exists_:subject.MESH
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/MESH-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    LOINC-UniProtKB-related:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with 30522-7 (CRP HIGH SENSITIVITY)
        ##   should get P78324 (CVD3_P78324)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    LOINC-UniProtKB-related-Rev:
    - inputs:
      - id: LOINC
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"LOINC:{inputs[0]}" AND predicate.type:related_to AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with 43727-7 (LDL SMALL)
        ##   should get P05231 (ONC2_P05231)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-LOINC:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get 2571-8 (TRIGLYCERIDES)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-LOINC-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get 1742-6 (ALAT (SGPT))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-NCIT:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with C282 (ARACHIDONIC ACID)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-NCIT-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get C282 (ARACHIDONIC ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-CHEBI:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with C282 (ARACHIDONIC ACID)
        ##   should get CHEBI:78053 (DPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-CHEBI-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-KEGGCOMPOUND:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get C00473 (retinol (Vitamin A))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-KEGGCOMPOUND-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C282 (ARACHIDONIC ACID)
        ##   should get C04100 (1-linoleoyl-GPC (18:2))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-PUBCHEM:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get 145911 (1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-PUBCHEM-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with C282 (ARACHIDONIC ACID)
        ##   should get 194501 (3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-HMDB:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get HMDB06469 (linoleoylcarnitine (C18:2)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-HMDB-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with C615 (LINOLEIC_ACID)
        ##   should get HMDB07984 (1-palmitoyl-2-eicosapentaenoyl-GPC (16:0/20:5)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-CAS:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get 222403-67-0 (sphingomyelin (d18:1/20:1, d18:2/20:0)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # NCIT-CAS-Rev:
    # - inputs:
    #   - id: NCIT
    #     semantic: ClinicalFinding
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    ## no NCIT-KEGGDRUG, NCIT-KEGGDRUG-Rev matching records
    ## no NCIT-MESH, NCIT-MESH-Rev matching records
    NCIT-UniProtKB:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with C282 (ARACHIDONIC ACID)
        ##   should get O95630 (INF_O95630)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    NCIT-UniProtKB-Rev:
    - inputs:
      - id: NCIT
        semantic: ClinicalFinding
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"NCIT:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with C2563 (OMEGA_6_TOTAL)
        ##   should get P01130 (CVD3_P01130)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## note: there are no records with subject.NCIT and related_to. There are 3 records with object.NCIT and related_to
    CHEBI-LOINC:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get 2085-9 (HDL CHOL DIRECT)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-LOINC-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with CHEBI:78053 (DPA)
        ##   should get 2160-0 (CREATININE ENZ, SER)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-NCIT:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-NCIT-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with CHEBI:78053 (DPA)
        ##   should get C282 (ARACHIDONIC ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-CHEBI:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with CHEBI:78060 (DHA)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-CHEBI-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get CHEBI:78060 (DHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-KEGGCOMPOUND:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get C00847 (pyridoxate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-KEGGCOMPOUND-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get C04039 (2,3-dihydroxyisovalerate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-PUBCHEM:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get 65977 (N2,N5-diacetylornithine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-PUBCHEM-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get 194501 (3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-HMDB:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with CHEBI:78060 (DHA)
        ##   should get HMDB07121 (palmitoyl-docosahexaenoyl-glycerol (16:0/22:6) [1]*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-HMDB-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with CHEBI:78060 (DHA)
        ##   should get HMDB07988 (1-palmitoyl-2-adrenoyl-GPC (16:0/22:4)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-CAS:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with CHEBI:61330 (EPA)
        ##   should get 1955-23-3 (3-hydroxypyridine sulfate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # CHEBI-CAS-Rev:
    # - inputs:
    #   - id: CHEBI
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    ## no CHEBI-KEGGDRUG, CHEBI-KEGGDRUG-Rev matching records
    ## no CHEBI-MESH, CHEBI-MESH-Rev matching records
    CHEBI-UniProtKB:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with CHEBI:78060 (DHA)
        ##   should get P14210 (ONC2_P14210)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CHEBI-UniProtKB-Rev:
    - inputs:
      - id: CHEBI
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with CHEBI:78060 (DHA)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## note: there are no records with subject.CHEBI and related_to / object.CHEBI and related_to
    KEGGCOMPOUND-LOINC:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with C03079 (4-hydroxyglutamate)
        ##   should get 2345-7 (GLUCOSE)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-LOINC-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with C00025 (glutamate)
        ##   should get 1742-6 (ALAT (SGPT))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-NCIT:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with C04100 (1-linoleoyl-GPC (18:2))
        ##   should get C282 (ARACHIDONIC ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-NCIT-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with C00473 (retinol (Vitamin A))
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-CHEBI:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with C04039 (2,3-dihydroxyisovalerate)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-CHEBI-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with C00847 (pyridoxate)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-KEGGCOMPOUND:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C03079 (4-hydroxyglutamate)
        ##   should get C00025 (glutamate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-KEGGCOMPOUND-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C00025 (glutamate)
        ##   should get C03079 (4-hydroxyglutamate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-PUBCHEM:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with C03045 (2-hydroxystearate)
        ##   should get 151731 (palmitoylcholine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-PUBCHEM-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with C01879 (5-oxoproline)
        ##   should get 102212 (2'-O-methyluridine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-HMDB:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with C03065 (beta-guanidinopropanoate)
        ##   should get HMDB11352 (1-(1-enyl-palmitoyl)-2-arachidonoyl-GPE (P-16:0/20:4)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-HMDB-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with C00020 (adenosine 5'-monophosphate (AMP))
        ##   should get HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-CAS:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with C03137 (N-acetyltryptophan)
        ##   should get 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-CAS-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with C00090 (catechol sulfate)
        ##   should get 105450-08-6 (benzoylcarnitine*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-KEGGDRUG:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with C02477 (alpha-tocopherol)
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-KEGGDRUG-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_DRUG
        ## example: replace {inputs[0]} with C00187 (cholesterol)
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NOTE: no KEGGCOMPOUND-MESH, 1 record for KEGGCOMPOUND-MESH-Rev
    KEGGCOMPOUND-UniProtKB:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with C01835 (maltotriose)
        ##   should get O14625 (INF_O14625)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-UniProtKB-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with C00366 (urate)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-LOINC-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get 13965-9 (HOMOCYSTEINE, SERUM)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-LOINC-related-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with C00059 (sulfate*)
        ##   should get 30522-7 (CRP HIGH SENSITIVITY)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NO KEGGCOMPOUND-NCIT-related, KEGGCOMPOUND-NCIT-related-Rev records
## NO KEGGCOMPOUND-CHEBI-related, KEGGCOMPOUND-CHEBI-related-Rev records
    KEGGCOMPOUND-KEGGCOMPOUND-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get C00065 (serine)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-KEGGCOMPOUND-related-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with C00065 (serine)
        ##   should get C04230 (1-myristoyl-GPC (14:0))
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-PUBCHEM-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get 129659 (umbelliferone sulfate)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # KEGGCOMPOUND-PUBCHEM-related-Rev:
    # - inputs:
    #   - id: "KEGG.COMPOUND"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: "PUBCHEM.COMPOUND"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.PUBCHEM
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    KEGGCOMPOUND-HMDB-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get HMDB00656 (cysteine-glutathione disulfide)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # KEGGCOMPOUND-HMDB-related-Rev:
    # - inputs:
    #   - id: "KEGG.COMPOUND"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: HMDB
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.HMDB
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/HMDB-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    KEGGCOMPOUND-CAS-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get 1955-23-3 (3-hydroxypyridine sulfate)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # KEGGCOMPOUND-CAS-related-Rev:
    # - inputs:
    #   - id: "KEGG.COMPOUND"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    KEGGCOMPOUND-KEGGDRUG-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get D00326 (fluoxetine)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # ## no matching records
    # KEGGCOMPOUND-KEGGDRUG-related-Rev:
    # - inputs:
    #   - id: "KEGG.COMPOUND"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: "KEGG.DRUG"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.KEGG_DRUG
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## NO KEGGCOMPOUND-MESH-related, KEGGCOMPOUND-MESH-related-Rev records
    KEGGCOMPOUND-UniProtKB-related:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with C04230 (1-myristoyl-GPC (14:0))
        ##   should get O00533 (CAM_O00533)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGCOMPOUND-UniProtKB-related-Rev:
    - inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.COMPOUND:{inputs[0]}" AND predicate.type:related_to AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with C00090 (catechol sulfate)
        ##   should get P05231 (ONC2_P05231)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-LOINC:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with 122198196 (6-hydroxyindole sulfate)
        ##   should get 2160-0 (CREATININE ENZ, SER)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-LOINC-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with 5283573 (N-stearoyl-sphinganine (d18:0/18:0)*)
        ##   should get 1742-6 (ALAT (SGPT))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-NCIT:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with 194501 (3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**)
        ##   should get C282 (ARACHIDONIC ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-NCIT-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with 145911 (1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-CHEBI:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with 194501 (3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-CHEBI-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with 65977 (N2,N5-diacetylornithine)
        ##   should get CHEBI:61330 (EPA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-KEGGCOMPOUND:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 102212 (2'-O-methyluridine)
        ##   should get C01879 (5-oxoproline)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-KEGGCOMPOUND-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 151731 (palmitoylcholine)
        ##   should get C03045 (2-hydroxystearate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-PUBCHEM:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with 11425365 (ascorbic acid 3-sulfate*)
        ##   should get 151731 (palmitoylcholine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-PUBCHEM-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with 151731 (palmitoylcholine)
        ##   should get 11425365 (ascorbic acid 3-sulfate*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-HMDB:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with 10981970 (C-glycosyltryptophan)
        ##   should get HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-HMDB-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with 151492 (3-hydroxyhexanoate)
        ##   should get HMDB00317 (2-hydroxy-3-methylvalerate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-CAS:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with 10981970 (C-glycosyltryptophan)
        ##   should get 251981-06-3 (octadecenedioylcarnitine (C18:1-DC)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-CAS-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with 134508 (pyroglutamine*)
        ##   should get 251981-06-3 (octadecenedioylcarnitine (C18:1-DC)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-KEGGDRUG:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with 3983 (1-palmityl-GPC (O-16:0))
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-KEGGDRUG-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_DRUG
        ## example: replace {inputs[0]} with 145911 (1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*)
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NOTE: no PUBCHEM-MESH, PUBCHEM-MESH-Rev
    PUBCHEM-UniProtKB:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with 10981970 (C-glycosyltryptophan)
        ##   should get Q07011 (INF_Q07011)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    PUBCHEM-UniProtKB-Rev:
    - inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"PUBCHEM:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with 14274897 (N,N,N-trimethyl-5-aminovalerate)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## note: there are no records with subject.PUBCHEM and related_to. There are 80 records with object.PUBCHEM and related_to
    HMDB-LOINC:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with HMDB00317 (2-hydroxy-3-methylvalerate)
        ##   should get 13965-9 (HOMOCYSTEINE, SERUM)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-LOINC-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with HMDB00532 (N-acetylglycine)
        ##   should get 1742-6 (ALAT (SGPT))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-NCIT:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with HMDB07984 (1-palmitoyl-2-eicosapentaenoyl-GPC (16:0/20:5)*)
        ##   should get C615 (LINOLEIC_ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-NCIT-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with HMDB06469 (linoleoylcarnitine (C18:2)*)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-CHEBI:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with HMDB07988 (1-palmitoyl-2-adrenoyl-GPC (16:0/22:4)*)
        ##   should get CHEBI:78060 (DHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-CHEBI-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with HMDB07121 (palmitoyl-docosahexaenoyl-glycerol (16:0/22:6) [1]*)
        ##   should get CHEBI:78060 (DHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-KEGGCOMPOUND:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        ##   should get C00020 (adenosine 5'-monophosphate (AMP))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-KEGGCOMPOUND-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with HMDB11352 (1-(1-enyl-palmitoyl)-2-arachidonoyl-GPE (P-16:0/20:4)*)
        ##   should get C03065 (beta-guanidinopropanoate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-PUBCHEM:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with HMDB00317 (2-hydroxy-3-methylvalerate)
        ##   should get 151492 (3-hydroxyhexanoate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-PUBCHEM-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        ##   should get 10981970 (C-glycosyltryptophan)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-HMDB:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        ##   should get HMDB00705 (hexanoylcarnitine (C6))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-HMDB-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with HMDB00705 (hexanoylcarnitine (C6))
        ##   should get HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-CAS:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with HMDB00529 (5-dodecenoate (12:1n7))
        ##   should get 98930-66-6 (cis-4-decenoylcarnitine (C10:1))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-CAS-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with HMDB00613 (erythronate*)
        ##   should get 105450-08-6 (benzoylcarnitine*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-KEGGDRUG:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with HMDB60564 (carboxyibuprofen)
        ##   should get D00126 (ibuprofen)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-KEGGDRUG-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_DRUG
        ## example: replace {inputs[0]} with HMDB00848 (stearoylcarnitine (C18))
        ##   should get D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NOTE: no HMDB-MESH, HMDB-MESH-Rev
    HMDB-UniProtKB:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with HMDB00317 (2-hydroxy-3-methylvalerate)
        ##   should get P01241 (CVD2_P01241)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    HMDB-UniProtKB-Rev:
    - inputs:
      - id: HMDB
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"HMDB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## note: there are no records with subject.HMDB and related_to. There are 149 records with object.HMDB and related_to
    KEGGDRUG-LOINC:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get 44733-4 (Triglyceride HDL Ratio)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-LOINC-Rev:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get 62255-5 (LPIR_SCORE)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## no KEGGDRUG-NCIT, KEGGDRUG-NCIT-Rev records
## no KEGGDRUG-CHEBI, KEGGDRUG-CHEBI-Rev records
    KEGGDRUG-KEGGCOMPOUND:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get C00187 (cholesterol)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-KEGGCOMPOUND-Rev:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get C02477 (alpha-tocopherol)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-PUBCHEM:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get 145911 (1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-PUBCHEM-Rev:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get 3983 (1-palmityl-GPC (O-16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-HMDB:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get HMDB00848 (stearoylcarnitine (C18))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-HMDB-Rev:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with D00126 (ibuprofen)
        ##   should get HMDB60564 (carboxyibuprofen)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    KEGGDRUG-CAS:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get 4201-62-1 (lactosyl-N-palmitoyl-sphingosine (d18:1/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # KEGGDRUG-CAS-Rev:
    # - inputs:
    #   - id: "KEGG.DRUG"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## NOTE: no KEGGDRUG-KEGGDRUG, KEGGDRUG-KEGGDRUG-Rev
## NOTE: no KEGGDRUG-MESH, KEGGDRUG-MESH-Rev
    KEGGDRUG-UniProtKB:
    - inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with D03585 (1,2-dipalmitoyl-GPC (16:0/16:0))
        ##   should get P08833 (CVD3_P08833)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # KEGGDRUG-UniProtKB-Rev:
    # - inputs:
    #   - id: "KEGG.DRUG"
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"KEGG.DRUG:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
    #        AND _exists_:subject.UniProtKB
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## note: there are no records with subject.KEGG_DRUG and related_to. There are 19 records with object.KEGG_DRUG and related_to
    CAS-LOINC:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with 1955-23-3 (3-hydroxypyridine sulfate)
        ##   should get 30522-7 (CRP HIGH SENSITIVITY)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-LOINC-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        ##   should get 1751-7 (ALBUMIN)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## no CAS-NCIT / 11 CAS-NCIT-Rev records
## no CAS-CHEBI / 2 CAS-CHEBI-Rev records
    CAS-KEGGCOMPOUND:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 105450-08-6 (benzoylcarnitine*)
        ##   should get C00090 (catechol sulfate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-KEGGCOMPOUND-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        ##   should get C03137 (N-acetyltryptophan)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-PUBCHEM:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with 251981-06-3 (octadecenedioylcarnitine (C18:1-DC)*)
        ##   should get 134508 (pyroglutamine*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-PUBCHEM-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with 251981-06-3 (octadecenedioylcarnitine (C18:1-DC)*)
        ##   should get 10981970 (C-glycosyltryptophan)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-HMDB:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with 105450-08-6 (benzoylcarnitine*)
        ##   should get HMDB00613 (erythronate*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-HMDB-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with 98930-66-6 (CAS:98930-66-6)
        ##   should get HMDB00529 (5-dodecenoate (12:1n7))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-CAS:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with 121999-58-4 (sphingomyelin (d17:1/16:0, d18:1/15:0, d16:1/17:0)*)
        ##   should get 121999-64-2 (sphingomyelin (d18:1/17:0, d17:1/18:0, d19:1/16:0))
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-CAS-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with 121999-64-2 (sphingomyelin (d18:1/17:0, d17:1/18:0, d19:1/16:0))
        ##   should get 121999-58-4 (sphingomyelin (d17:1/16:0, d18:1/15:0, d16:1/17:0)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## NOTE: no CAS-KEGGDRUG/ 19 CAS-KEGGDRUG-Rev
## NOTE: no CAS-MESH, CAS-MESH-Rev
    CAS-UniProtKB:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with 1955-23-3 (3-hydroxypyridine sulfate)
        ##   should get P41159 (CVD2_P41159)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    CAS-UniProtKB-Rev:
    - inputs:
      - id: CAS
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"CAS:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        ##   should get O00182 (CVD2_O00182)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## note: there are no records with subject.CAS and related_to. There are 12 records with object.CAS and related_to
    MESH-LOINC:
    - inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"MESH:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with D013482 (SUPEROX DISMUT SOD)
        ##   should get 3074-2 (TNF-ALPHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # MESH-LOINC-Rev:
    # - inputs:
    #   - id: MESH
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: LOINC
    #     semantic: ClinicalFinding
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"MESH:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
    #        AND _exists_:subject.LOINC
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/LOINC-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    MESH-KEGGCOMPOUND:
    - inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"MESH:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with D013482 (SUPEROX DISMUT SOD)
        ##   should get C05282 (gamma-glutamylglutamate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## no matching records
    # MESH-KEGGCOMPOUND-Rev:
    # - inputs:
    #   - id: MESH
    #     semantic: SmallMolecule
    #   outputs:
    #   - id: "KEGG.COMPOUND"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"MESH:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
    #        AND _exists_:subject.KEGG_COMPOUND
    #     size: 1000
    #   predicate: correlated_with
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    UniProtKB-LOINC:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get 20448-7 (INSULIN)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-LOINC-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with Q07325 (INF_Q07325)
        ##   should get 13965-9 (HOMOCYSTEINE, SERUM)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-NCIT:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with P01130 (CVD3_P01130)
        ##   should get C2563 (OMEGA_6_TOTAL)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-NCIT-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:ClinicalFinding
           AND _exists_:subject.NCIT
        ## example: replace {inputs[0]} with O95630 (INF_O95630)
        ##   should get C282 (ARACHIDONIC ACID)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-CHEBI:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CHEBI
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get CHEBI:78060 (DHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-CHEBI-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CHEBI
        ## example: replace {inputs[0]} with P14210 (ONC2_P14210)
        ##   should get CHEBI:78060 (DHA)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-KEGGCOMPOUND:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get C00366 (urate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-KEGGCOMPOUND-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with O14625 (INF_O14625)
        ##   should get C01835 (maltotriose)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-PUBCHEM:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get 14274897 (N,N,N-trimethyl-5-aminovalerate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-PUBCHEM-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.PUBCHEM
        ## example: replace {inputs[0]} with Q07011 (INF_Q07011)
        ##   should get 10981970 (C-glycosyltryptophan)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-HMDB:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get HMDB00215 (N-acetylglucosamine/N-acetylgalactosamine)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-HMDB-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.HMDB
        ## example: replace {inputs[0]} with P01241 (CVD2_P01241)
        ##   should get HMDB00317 (2-hydroxy-3-methylvalerate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-CAS:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with O00182 (CVD2_O00182)
        ##   should get 1247-64-9 (pregnenediol sulfate (C21H34O5S)*)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-CAS-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:MolecularEntity
           AND _exists_:subject.CAS
        ## example: replace {inputs[0]} with P41159 (CVD2_P41159)
        ##   should get 1955-23-3 (3-hydroxypyridine sulfate)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
## no UniProtKB-KEGGDRUG / 6 UniProtKB-KEGGDRUG-Rev records
## NOTE: no UniProtKB-MESH, UniProtKB-MESH-Rev
    UniProtKB-UniProtKB:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with O00175 (CVD3_O00175)
        ##   should get O15467 (CVD3_O15467)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-UniProtKB-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:correlated_with AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with O15467 (CVD3_O15467)
        ##   should get O00175 (CVD3_O00175)
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-LOINC-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:ClinicalFinding
           AND _exists_:object.LOINC
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get 43727-7 (LDL SMALL)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-LOINC-related-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:ClinicalFinding
           AND _exists_:subject.LOINC
        ## example: replace {inputs[0]} with P78324 (CVD3_P78324)
        ##   should get 30522-7 (CRP HIGH SENSITIVITY)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-NCIT-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:ClinicalFinding
           AND _exists_:object.NCIT
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get C615 (LINOLEIC_ACID)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    ## NO MATCHING RECORDS
    # UniProtKB-NCIT-related-Rev:
    # - inputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   outputs:
    #   - id: NCIT
    #     semantic: ClinicalFinding
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:ClinicalFinding
    #        AND _exists_:subject.NCIT
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/NCIT-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## NO UniProtKB-CHEBI-related / UniProtKB-CHEBI-related-Rev records
    UniProtKB-KEGGCOMPOUND-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_COMPOUND
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get C00090 (catechol sulfate)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-KEGGCOMPOUND-related-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
           AND _exists_:subject.KEGG_COMPOUND
        ## example: replace {inputs[0]} with O00533 (CAM_O00533)
        ##   should get C04230 (1-myristoyl-GPC (14:0))
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-PUBCHEM-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.PUBCHEM
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get 11425365 (ascorbic acid 3-sulfate*)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # UniProtKB-PUBCHEM-related-Rev:
    # - inputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   outputs:
    #   - id: "PUBCHEM.COMPOUND"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.PUBCHEM
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    UniProtKB-HMDB-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.HMDB
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get HMDB00387 (3-hydroxylaurate)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # UniProtKB-HMDB-related-Rev:
    # - inputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   outputs:
    #   - id: HMDB
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.HMDB
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/HMDB-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    UniProtKB-CAS-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.CAS
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get 1955-23-3 (3-hydroxypyridine sulfate)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # UniProtKB-CAS-related-Rev:
    # - inputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   outputs:
    #   - id: CAS
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.CAS
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/CAS-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
    UniProtKB-KEGGDRUG-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:MolecularEntity
           AND _exists_:object.KEGG_DRUG
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get D00285 (sulfamethoxazole)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    # UniProtKB-KEGGDRUG-related-Rev:
    # - inputs:
    #   - id: UniProtKB
    #     semantic: Protein
    #   outputs:
    #   - id: "KEGG.DRUG"
    #     semantic: SmallMolecule
    #   parameters:
    #     fields: subject,predicate,object
    #     q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:MolecularEntity
    #        AND _exists_:subject.KEGG_DRUG
    #     size: 1000
    #   predicate: related_to
    #   response_mapping:
    #     $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
    #   # source: 'Multiomics Provider: Wellness'
    #   supportBatch: false
## NOTE: no UniProtKB-MESH-related, UniProtKB-MESH-related-Rev
    UniProtKB-UniProtKB-related:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: object,predicate,subject
        q: subject.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND object.type:Protein
           AND _exists_:object.UniProtKB
        ## example: replace {inputs[0]} with P05231 (ONC2_P05231)
        ##   should get O00175 (CVD3_O00175)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
    UniProtKB-UniProtKB-related-Rev:
    - inputs:
      - id: UniProtKB
        semantic: Protein
      outputs:
      - id: UniProtKB
        semantic: Protein
      parameters:
        fields: subject,predicate,object
        q: object.id:"UniProtKB:{inputs[0]}" AND predicate.type:related_to AND subject.type:Protein
           AND _exists_:subject.UniProtKB
        ## example: replace {inputs[0]} with O00175 (CVD3_O00175)
        ##   should get P05231 (ONC2_P05231)
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      supportBatch: false
  x-bte-response-mapping:
    LOINC:
      LOINC: hits.object.LOINC
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    LOINC-rev:
      LOINC: hits.subject.LOINC
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    NCIT:
      NCIT: hits.object.NCIT
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    NCIT-rev:
      NCIT: hits.subject.NCIT
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    CHEBI:
      CHEBI: hits.object.CHEBI
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    CHEBI-rev:
      CHEBI: hits.subject.CHEBI
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    KEGGCOMPOUND:
      "KEGG.COMPOUND": hits.object.KEGG_COMPOUND
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    KEGGCOMPOUND-rev:
      "KEGG.COMPOUND": hits.subject.KEGG_COMPOUND
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    PUBCHEM:
      "PUBCHEM.COMPOUND": hits.object.PUBCHEM
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    PUBCHEM-rev:
      "PUBCHEM.COMPOUND": hits.subject.PUBCHEM
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    HMDB:
      HMDB: hits.object.HMDB
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    HMDB-rev:
      HMDB: hits.subject.HMDB
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    KEGGDRUG:
      "KEGG.DRUG": hits.object.KEGG_DRUG
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    KEGGDRUG-rev:
      "KEGG.DRUG": hits.subject.KEGG_DRUG
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    CAS:
      CAS: hits.object.CAS
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    CAS-rev:
      CAS: hits.subject.CAS
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    MESH:
      MESH: hits.object.MESH
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    MESH-rev:
      MESH: hits.subject.MESH
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    UniProtKB:
      UniProtKB: hits.object.UniProtKB
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
    UniProtKB-rev:
      UniProtKB: hits.subject.UniProtKB
      count: hits.predicate.N
      bonferroni_pval: hits.predicate.bonferroni_pval
      weighted_pvalue: hits.predicate.weighted_pvalue
      strength_of_relationship: hits.predicate.strength_of_relationship
      method: hits.predicate.type_of_relationship
      qualifier: hits.predicate.qualifier
      qualifier-label: hits.predicate.qualifier_value
      provenance-url: hits.predicate.provenance
      original_subject: hits.subject.id
      original_predicate: hits.predicate.relation
      original_object: hits.object.id
