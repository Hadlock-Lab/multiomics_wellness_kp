openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: >-
    Documentation of the BioThings API for Translator Multiomics Team's 
    Wellness KP.
  termsOfService: https://biothings.io/about
  title: Multiomics Wellness KP API
  version: '1.5.1'
  x-translator:
    infores: "infores:biothings-multiomics-wellness"
    component: KP
    team:
    - Multiomics Provider
    - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/multiomics_wellness_kp
  x-maturity: production
- description: Production server
  url: https://biothings.ncats.io/multiomics_wellness_kp
  x-maturity: production
tags:
- name: protein
- name: chemical_substance
- name: association
- name: annotation
- name: query
- name: translator
- name: biothings
- name: biothings_graph
paths:
  "/association/{id}":
    get:
      description: >-
        By default, this will return the complete association in JSON format. If the input is not valid,
        404 (NOT FOUND) will be returned.
        

        Optionally, you can pass a "fields" parameter to return only the annotation you want 
        (by filtering returned object fields). "fields" accepts any attributes (a.k.a fields) available 
        from the association. Multiple attributes should be separated by commas. If an attribute is not 
        available for a specific association, it will be ignored. Note that the attribute names are 
        case-sensitive.


        Just like the query service, you can also pass a "callback" parameter to make a JSONP call.
      parameters:
      - name: id
        in: path
        required: true
        example: "KEGG.COMPOUND:C14829-biolink:correlated_with-LOINC:44733-4-915--0.298-2.58720580594939e-20"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Association'
      #   '404':
      #     description: A response indicating an unknown association ID
      tags:
      - association
  "/association":
    post:
      description: >-
        Although making simple GET requests above to our service is sufficient in most use cases, 
        there are some times you might find it easier to batch query (e.g., retrieving multiple associations). 
        Fortunately, you can also make batch queries via POST requests when you need to.
      parameters:
      - name: ids
        description: >-
          Accepts multiple association ids separated by commas. Note that currently we only take ids up to 
          1000 maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "KEGG.COMPOUND:C14829-biolink:correlated_with-LOINC:44733-4-915--0.298-2.58720580594939e-20"
              - "KEGG.COMPOUND:C03771-biolink:correlated_with-CAS:222403-67-0-1253--0.198-1.38700513475056e-12"
            schema:
              type: object
              properties:
                ids:
                  description: >-
                    Accepts multiple association ids. Note that currently we only take the input ids 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - association
  "/metadata":
    get:
      description: Get metadata about the data available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/metadata/fields":
    get:
      description: Get metadata about the data fields available from the API
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # parameters:
      # - "$ref": "#/components/parameters/format"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/search"
      # - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      tags:
      - metadata
  "/query":
    get:
      description: >-
        Query service. In the output, "total" in the output gives the total number 
        of matching hits, while the actual hits are returned under "hits" field.
      parameters:
      - name: q
        description: >-
          Required, passing user query. The detailed query syntax for parameter is explained 
          [here for a core BioThings 
          API](https://docs.mychem.info/en/latest/doc/chem_query_service.html#query-syntax).
        in: query
        required: true
        example: subject.id:"KEGG.COMPOUND:C11332"
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/facets"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/callback"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/email"
      ## these are noted in the /spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/aggs"
      # - "$ref": "#/components/parameters/userquery"
      # - "$ref": "#/components/parameters/explain"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      description: >-
        Although making simple GET requests above to our query service is sufficient for most use cases, 
        there are times you might find it more efficient to make batch queries (e.g., retrieving data 
        for multiple inputs). Fortunately, you can also make batch queries via POST requests when you need to.


        The "query” field in the returned object indicates the matching query term. If a query term has no match, 
        it will return with a “notfound” field with the value “true”.
      parameters:
      - name: q
        description: >-
          Accepts multiple values separated by commas. Note that currently we only take the input values up to 1000 
          maximum, the rest will be omitted.


          The request body can also be used to provide these ids.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        description: >-
          Optional, specify one or more fields (separated by commas) to search. Default: _id


          The request body can also be used to provide this information.
        in: query
        ## setting to false since putting this info in the request body seems to work as well
        required: false
        schema:
          type: string
      - "$ref": "#/components/parameters/fields"
      - "$ref": "#/components/parameters/email"
      ## this is useful even when it's not noted in the docs
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
      # - "$ref": "#/components/parameters/sort"
      # - "$ref": "#/components/parameters/raw"
      # - "$ref": "#/components/parameters/rawquery"
      # - "$ref": "#/components/parameters/dotfield"
      # - "$ref": "#/components/parameters/_sorted"
      # - "$ref": "#/components/parameters/always_list"
      # - "$ref": "#/components/parameters/allow_null"
      # - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "KEGG.COMPOUND:C11332"
              - "KEGG.COMPOUND:C05565"
              scopes:
              - "subject.id"
            schema:
              type: object
              properties:
                q:
                  description: >-
                    Accepts multiple values separated by commas. Note that currently we only take the input values 
                    up to 1000 maximum, the rest will be omitted.
                  type: array
                  items:
                    type: string
                scopes:
                  description: >-
                    Specify one or more fields (separated by commas) to search. Default: _id
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: A 200 status code indicates a successful query, and is accompanied by the query response payload.
      ## commenting out schemas and other status codes for now
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-NCIT-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-MESH-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-MESH-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-related'
      - $ref: '#/components/x-bte-kgs-operations/LOINC-UniProtKB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CAS'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/NCIT-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CAS'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/CHEBI-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-related'
      - $ref: '#/components/x-bte-kgs-operations/KEGGCOMPOUND-UniProtKB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CAS'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/PUBCHEM-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CAS'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGDRUG'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-KEGGDRUG-Rev'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/HMDB-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-CAS'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/KEGGDRUG-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/CAS-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/CAS-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/CAS-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/CAS-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-CAS'
      - $ref: '#/components/x-bte-kgs-operations/CAS-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/CAS-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/CAS-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/MESH-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/MESH-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/MESH-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/MESH-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CHEBI'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CHEBI-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-LOINC-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-NCIT-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGCOMPOUND-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-PUBCHEM-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-HMDB-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-CAS-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGDRUG-related'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-KEGGDRUG-related-Rev'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB'
      - $ref: '#/components/x-bte-kgs-operations/UniProtKB-UniProtKB-Rev'
components:
  parameters:
    callback:
      name: callback
      description: >-
        Optional, you can pass a "callback" parameter to make a JSONP call.
      in: query
      required: false
      schema:
        type: string
    dotfield:
      name: dotfield
      description: >-
        Optional, can be used to control the format of the returned chemical object. 
        If "dotfield" is true, the returned data object is returned flattened (no nested objects) 
        using dotfield notation for key names. Default: false.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    email:
      name: email
      description: >-
        Optional, if you are regular users of our services, we encourage you to provide us an email, 
        so that we can better track the usage or follow up with you.
      in: query
      required: false
      schema:
        type: string
    facet_size:
      name: facet_size
      description: >-
        Optional, an integer (1 <= facet_size <= 1000) that specifies how many buckets to return in a 
        [faceted query](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: integer
        default: 10
    facets:
      name: facets
      description: >-
        Optional, a single field or comma-separated fields to return facets, can only be used on non-free text fields. 
        E.g. “facets=chembl.molecule_properties.full_mwt”. See [examples of faceted queries for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#faceted-queries).
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    fetch_all:
      name: fetch_all
      description: >-
        Optional, a boolean, which when TRUE, allows fast retrieval of all unsorted query hits. 
        The return object contains a _scroll_id field, which when passed as a parameter to the query endpoint 
        (see the scroll_id parameter), returns the next 1000 query results. Setting fetch_all = TRUE causes 
        the results to be inherently unsorted, therefore the sort parameter is ignored. For more information, 
        see [examples using fetch_all for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries). 
        Default: FALSE.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    fields:
      name: fields
      description: >-
        Optional, can be a comma-separated list to limit the fields returned from the chemical object. 
        If "fields=all", all available fields will be returned.
        

        Note that it supports dot notation as well, e.g., you can pass "chebi.name". 
        Default: "fields=all". 
        The parameter "filter" is an alias for this parameter.
      in: query
      required: false
      schema:
        type: string
        default: all
    from:
      name: from
      description: >-
        Optional, the number of matching chemical hits to skip, starting from 0. Default: 0. 
      in: query
      required: false
      schema:
        type: integer
        default: 0
    scroll_id:
      name: scroll_id
      description: >-
        Optional, a string containing the _scroll_id returned from a query request with fetch_all = TRUE. 
        Supplying a valid scroll_id will return the next 1000 unordered results. If the next results are 
        not obtained within 1 minute of the previous set of results, the scroll_id becomes stale, and a 
        new one must be obtained with another query request with fetch_all = TRUE. All other parameters are 
        ignored when the scroll_id parameter is supplied. For more information see [examples using scroll_id 
        for a core BioThings 
        API](https://docs.mychem.info/en/latest/doc/chem_query_service.html?highlight=from#scrolling-queries).
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: >-
        Optional, the maximum number of matching chemical hits to return (with a cap of 1000 at the moment). Default: 10.
        The combination of "size" and "from" parameters can be used to get paging for a large query.
      in: query
      required: false
      schema:
        type: integer
        default: 10
    sort:
      name: sort
      description: >-
        Optional, the comma-separated fields to sort on. Prefix with "-" for descending order, otherwise in ascending order. 
        Default: sort by matching scores in descending order.
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    ## these are noted in the https://mychem.info/v1/spec endpoint; commenting out for now
    # _sorted:
    #   name: _sorted
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    #     default: true
    # aggs:
    #   name: aggs
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # allow_null:
    #   name: allow_null
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # always_list:
    #   name: always_list
    #   in: query
    #   required: false
    #   schema:
    #     type: array
    #     items:
    #       type: string
    # explain:
    #   name: explain
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # format:
    #   name: format
    #   description: 'controls output format of server response, currently supports:
    #     "json", "jsonld", "html". Type: string. Default: json.'
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    #     default: json
    # prefix:
    #   name: prefix
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # raw:
    #   name: raw
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # rawquery:
    #   name: rawquery
    #   in: query
    #   required: false
    #   schema:
    #     type: boolean
    # search:
    #   name: search
    #   in: query
    #   required: false
    #   schema:
    #     type: string
    # userquery:
    #   name: userquery
    #   in: query
    #   required: false
    #   schema:
    #     type: string
  ## commenting out schemas and other status codes for now
  # schemas:
  #   Association:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Association'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Association'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## note the semantic types of the diff id namespaces in the api:
  ## - ClinicalFinding (we keep this mapping): LOINC, NCIT
  ## - MolecularEntity (we use SmallMolecule instead): CHEBI, KEGG.COMPOUND, PUBCHEM.COMPOUND, HMDB, CAS, KEGG.DRUG
  ## - ChemicalEntity (we use SmallMolecule instead): MESH
  ## - Protein (we use Gene instead): UniProtKB
    LOINC-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"     ## ALAT (SGPT)
      #     oneOutput: "LOINC:20448-7"  ## INSULIN
    LOINC-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:20448-7"  ## INSULIN
      #     oneOutput: "LOINC:1742-6"     ## ALAT (SGPT)
    LOINC-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"     ## ALAT (SGPT)
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    LOINC-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "LOINC:1742-6"     ## ALAT (SGPT)
    LOINC-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:2160-0"     ## CREATININE ENZ, SER
      #     oneOutput: "CHEBI:78053"   ## DPA
    LOINC-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78053"   ## DPA
      #     oneOutput: "LOINC:2160-0"     ## CREATININE ENZ, SER
    LOINC-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"              ## ALAT (SGPT)
      #     oneOutput: "KEGG.COMPOUND:C00025"   ## glutamate
    LOINC-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00025"   ## glutamate
      #     oneOutput: "LOINC:1742-6"        ## ALAT (SGPT)
    LOINC-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"                  ## ALAT (SGPT)
      #     oneOutput: "PUBCHEM.COMPOUND:5283573"   ## N-stearoyl-sphinganine (d18:0/18:0)*
    LOINC-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:5283573"   ## N-stearoyl-sphinganine (d18:0/18:0)*
      #     oneOutput: "LOINC:1742-6"            ## ALAT (SGPT)
    LOINC-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"        ## ALAT (SGPT)
      #     oneOutput: "HMDB:HMDB00532"   ## N-acetylglycine
    LOINC-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00532"   ## N-acetylglycine
      #     oneOutput: "LOINC:1742-6"            ## ALAT (SGPT)
    LOINC-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:1742-6"        ## ALAT (SGPT)
      #     oneOutput: "CAS:1247-64-9"    ## pregnenediol sulfate (C21H34O5S)*
    LOINC-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1247-64-9"    ## pregnenediol sulfate (C21H34O5S)*
      #     oneOutput: "LOINC:1742-6"            ## ALAT (SGPT)
    LOINC-KEGGDRUG:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:62255-5"          ## LPIR_SCORE
      #     oneOutput: "KEGG.DRUG:D03585"    ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    LOINC-KEGGDRUG-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"    ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "LOINC:62255-5"    ## LPIR_SCORE
  ## no LOINC-MESH: https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.MESH
    LOINC-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:   ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:13965-9"          ## HOMOCYSTEINE, SERUM
      #     oneOutput: "UniProtKB:Q07325"    ## INF_Q07325
    LOINC-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:Q07325"    ## INF_Q07325
      #     oneOutput: "LOINC:13965-9"    ## HOMOCYSTEINE, SERUM
    LOINC-LOINC-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:   ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"       ## CRP HIGH SENSITIVITY
      #     oneOutput: "LOINC:13964-2"    ## METHYLMALONIC ACID
    LOINC-LOINC-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:13964-2"      ## METHYLMALONIC ACID
      #     oneOutput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
    LOINC-NCIT-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:   ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
      #     oneOutput: "NCIT:C615"    ## LINOLEIC_ACID
    LOINC-NCIT-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C615"    ## LINOLEIC_ACID
      #     oneOutput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
  ## no LOINC-CHEBI-related: https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CHEBI
    LOINC-KEGGCOMPOUND-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
      #     oneOutput: "KEGG.COMPOUND:C00059"    ## sulfate*
    LOINC-KEGGCOMPOUND-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00059"    ## sulfate*
      #     oneOutput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
    LOINC-PUBCHEM-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
      #     oneOutput: "PUBCHEM.COMPOUND:11425365"    ## ascorbic acid 3-sulfate*
    LOINC-PUBCHEM-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:11425365"    ## ascorbic acid 3-sulfate*
      #     oneOutput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
    LOINC-HMDB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
      #     oneOutput: "HMDB:HMDB11565"    ## 1-palmitoleoylglycerol (16:1)*
    LOINC-HMDB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB11565"    ## 1-palmitoleoylglycerol (16:1)*
      #     oneOutput: "LOINC:30522-7"   ## CRP HIGH SENSITIVITY
    LOINC-CAS-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:47828-9"       ## ADIPONECTIN, SERUM
      #     oneOutput: "CAS:98930-66-6"   ## cis-4-decenoylcarnitine (C10:1)
    LOINC-CAS-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:98930-66-6"   ## cis-4-decenoylcarnitine (C10:1)
      #     oneOutput: "LOINC:47828-9"       ## ADIPONECTIN, SERUM
    LOINC-KEGGDRUG-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:62238-1"       ## GFR, MDRD, AFRICAN AM
      #     oneOutput: "KEGG.DRUG:D01085"   ## saccharin
    LOINC-KEGGDRUG-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D01085"   ## saccharin
      #     oneOutput: "LOINC:62238-1"       ## GFR, MDRD, AFRICAN AM
  ## NOTE: MESH uses ChemicalEntity, not MolecularEntity
    LOINC-MESH-related:  
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ChemicalEntity AND _exists_:object.MESH
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ChemicalEntity"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: MESH
        semantic: SmallMolecule
      parameters:   ## no prefix
        fields: >-
          object.MESH,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/MESH'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:47828-9"   ## ADIPONECTIN, SERUM
      #     oneOutput: "MESH:D013482"    ## SUPEROX DISMUT SOD
    LOINC-MESH-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:ChemicalEntity AND _exists_:object.MESH
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: MESH
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.MESH", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "MESH:D013482"    ## SUPEROX DISMUT SOD
      #     oneOutput: "LOINC:47828-9"   ## ADIPONECTIN, SERUM
    LOINC-UniProtKB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:   ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["subject.LOINC", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:   ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"         ## CRP HIGH SENSITIVITY
      #     oneOutput: "UniProtKB:P78324"   ## CVD3_P78324
    LOINC-UniProtKB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.LOINC AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P78324"   ## CVD3_P78324
      #     oneOutput: "LOINC:30522-7"         ## CRP HIGH SENSITIVITY
    NCIT-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"     ## OMEGA_6_TOTAL
      #     oneOutput: "LOINC:2571-8"  ## TRIGLYCERIDES
    NCIT-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:2571-8"  ## TRIGLYCERIDES
      #     oneOutput: "NCIT:C2563"     ## OMEGA_6_TOTAL
    NCIT-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C282"     ## ARACHIDONIC ACID
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    NCIT-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "NCIT:C282"     ## ARACHIDONIC ACID
    NCIT-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C282"     ## ARACHIDONIC ACID
      #     oneOutput: "CHEBI:78053"  ## DPA
    NCIT-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78053"  ## DPA
      #     oneOutput: "NCIT:C282"     ## ARACHIDONIC ACID
    NCIT-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "KEGG.COMPOUND:C00473"  ## retinol (Vitamin A)
    NCIT-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00473"  ## retinol (Vitamin A)
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    NCIT-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "PUBCHEM.COMPOUND:145911"  ## 1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*
    NCIT-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:145911"  ## 1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    NCIT-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "HMDB:HMDB06469"  ## linoleoylcarnitine (C18:2)*
    NCIT-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB06469"  ## linoleoylcarnitine (C18:2)*
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    NCIT-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "CAS:222403-67-0"  ## sphingomyelin (d18:1/20:1, d18:2/20:0)*
    NCIT-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:222403-67-0"  ## sphingomyelin (d18:1/20:1, d18:2/20:0)*
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    ## no NCIT-KEGGDRUG, NCIT-KEGGDRUG-Rev matching records
    ## no NCIT-MESH, NCIT-MESH-Rev matching records
    NCIT-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.NCIT", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C282"  ## ARACHIDONIC ACID
      #     oneOutput: "UniProtKB:O95630"  ## INF_O95630
    NCIT-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.NCIT AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          subject.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O95630"  ## INF_O95630
      #     oneOutput: "NCIT:C282"  ## ARACHIDONIC ACID
## note: there are no records with subject.NCIT and related_to. There are 3 records with object.NCIT and related_to
    CHEBI-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "LOINC:2085-9"  ## HDL CHOL DIRECT
    CHEBI-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:2085-9"  ## HDL CHOL DIRECT
      #     oneOutput: "CHEBI:61330"  ## EPA
    CHEBI-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    CHEBI-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "CHEBI:61330"  ## EPA
    CHEBI-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78060"  ## DHA 
      #     oneOutput: "CHEBI:61330"  ## EPA
    CHEBI-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "CHEBI:78060"  ## DHA 
    CHEBI-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "KEGG.COMPOUND:C00847"  ## pyridoxate
    CHEBI-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00847"  ## pyridoxate
      #     oneOutput: "CHEBI:61330"  ## EPA
    CHEBI-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "PUBCHEM.COMPOUND:65977"  ## N2,N5-diacetylornithine
    CHEBI-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:65977"  ## N2,N5-diacetylornithine
      #     oneOutput: "CHEBI:61330"  ## EPA
    CHEBI-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78060"  ## DHA
      #     oneOutput: "HMDB:HMDB07121"  ## palmitoyl-docosahexaenoyl-glycerol (16:0/22:6) [1]*
    CHEBI-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB07121"  ## palmitoyl-docosahexaenoyl-glycerol (16:0/22:6) [1]*
      #     oneOutput: "CHEBI:78060"  ## DHA
    CHEBI-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
    CHEBI-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
      #     oneOutput: "CHEBI:61330"  ## EPA
    ## no CHEBI-KEGGDRUG, CHEBI-KEGGDRUG-Rev matching records
    ## no CHEBI-MESH, CHEBI-MESH-Rev matching records
    CHEBI-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.CHEBI", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78060"  ## DHA
      #     oneOutput: "UniProtKB:P14210"  ## ONC2_P14210
    CHEBI-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CHEBI AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          subject.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P14210"  ## ONC2_P14210
      #     oneOutput: "CHEBI:78060"  ## DHA
## note: there are no records with subject.CHEBI and related_to / object.CHEBI and related_to
    KEGGCOMPOUND-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C03079"  ## 4-hydroxyglutamate
      #     oneOutput: "LOINC:2345-7"  ## GLUCOSE
    KEGGCOMPOUND-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:2345-7"  ## GLUCOSE
      #     oneOutput: "KEGG.COMPOUND:C03079"  ## 4-hydroxyglutamate
    KEGGCOMPOUND-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04100"  ## 1-linoleoyl-GPC (18:2)
      #     oneOutput: "NCIT:C282"  ## ARACHIDONIC ACID
    KEGGCOMPOUND-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C282"  ## ARACHIDONIC ACID
      #     oneOutput: "KEGG.COMPOUND:C04100"  ## 1-linoleoyl-GPC (18:2)
    KEGGCOMPOUND-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04039"  ## 2,3-dihydroxyisovalerate 
      #     oneOutput: "CHEBI:61330"  ## EPA
    KEGGCOMPOUND-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "KEGG.COMPOUND:C04039"  ## 2,3-dihydroxyisovalerate 
    KEGGCOMPOUND-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C03079"  ## 4-hydroxyglutamate
      #     oneOutput: "KEGG.COMPOUND:C00025"  ## glutamate
    KEGGCOMPOUND-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00025"  ## glutamate
      #     oneOutput: "KEGG.COMPOUND:C03079"  ## 4-hydroxyglutamate
    KEGGCOMPOUND-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C03045"  ## 2-hydroxystearate
      #     oneOutput: "PUBCHEM.COMPOUND:151731"  ## palmitoylcholine
    KEGGCOMPOUND-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:151731"  ## palmitoylcholine
      #     oneOutput: "KEGG.COMPOUND:C03045"  ## 2-hydroxystearate
    KEGGCOMPOUND-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C03065"  ## beta-guanidinopropanoate
      #     oneOutput: "HMDB:HMDB11352"  ## 1-(1-enyl-palmitoyl)-2-arachidonoyl-GPE (P-16:0/20:4)*
    KEGGCOMPOUND-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB11352"  ## 1-(1-enyl-palmitoyl)-2-arachidonoyl-GPE (P-16:0/20:4)*
      #     oneOutput: "KEGG.COMPOUND:C03065"  ## beta-guanidinopropanoate
    KEGGCOMPOUND-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C03137"  ## N-acetyltryptophan
      #     oneOutput: "CAS:1247-64-9"  ## pregnenediol sulfate (C21H34O5S)*
    KEGGCOMPOUND-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1247-64-9"  ## pregnenediol sulfate (C21H34O5S)*
      #     oneOutput: "KEGG.COMPOUND:C03137"  ## N-acetyltryptophan
    KEGGCOMPOUND-KEGGDRUG:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C02477"  ## alpha-tocopherol
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    KEGGCOMPOUND-KEGGDRUG-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "KEGG.COMPOUND:C02477"  ## alpha-tocopherol
## NOTE: no KEGGCOMPOUND-MESH, 1 record for KEGGCOMPOUND-MESH-Rev
    KEGGCOMPOUND-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C01835"  ## maltotriose
      #     oneOutput: "UniProtKB:O14625"  ## INF_O14625
    KEGGCOMPOUND-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O14625"  ## INF_O14625
      #     oneOutput: "KEGG.COMPOUND:C01835"  ## maltotriose
    KEGGCOMPOUND-LOINC-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "LOINC:13965-9"  ## HOMOCYSTEINE, SERUM
    KEGGCOMPOUND-LOINC-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:13965-9"  ## HOMOCYSTEINE, SERUM
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
## NO KEGGCOMPOUND-NCIT-related, KEGGCOMPOUND-NCIT-related-Rev records
## NO KEGGCOMPOUND-CHEBI-related, KEGGCOMPOUND-CHEBI-related-Rev records
    KEGGCOMPOUND-KEGGCOMPOUND-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "KEGG.COMPOUND:C00065"  ## serine
    KEGGCOMPOUND-KEGGCOMPOUND-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00065"  ## serine
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
    KEGGCOMPOUND-PUBCHEM-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "PUBCHEM.COMPOUND:129659"  ## umbelliferone sulfate
    KEGGCOMPOUND-PUBCHEM-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:129659"  ## umbelliferone sulfate
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
    KEGGCOMPOUND-HMDB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "HMDB:HMDB00656"  ## cysteine-glutathione disulfide
    KEGGCOMPOUND-HMDB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00656"  ## cysteine-glutathione disulfide
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
    KEGGCOMPOUND-CAS-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
    KEGGCOMPOUND-CAS-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
    KEGGCOMPOUND-KEGGDRUG-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "KEGG.DRUG:D00326"  ## fluoxetine
    KEGGCOMPOUND-KEGGDRUG-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D00326"  ## fluoxetine
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
## NO KEGGCOMPOUND-MESH-related, KEGGCOMPOUND-MESH-related-Rev records
    KEGGCOMPOUND-UniProtKB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["subject.KEGG_COMPOUND", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
      #     oneOutput: "UniProtKB:O00533"  ## CAM_O00533
    KEGGCOMPOUND-UniProtKB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_COMPOUND AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00533"  ## CAM_O00533
      #     oneOutput: "KEGG.COMPOUND:C04230"  ## 1-myristoyl-GPC (14:0)
    PUBCHEM-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:122198196"  ## 6-hydroxyindole sulfate
      #     oneOutput: "LOINC:2160-0"  ## CREATININE ENZ, SER
    PUBCHEM-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:2160-0"  ## CREATININE ENZ, SER
      #     oneOutput: "PUBCHEM.COMPOUND:122198196"  ## 6-hydroxyindole sulfate
    PUBCHEM-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:3300276"  ## 1-palmitoyl-GPG (16:0)*
      #     oneOutput: "NCIT:C615"  ## LINOLEIC_ACID
    PUBCHEM-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C615"  ## LINOLEIC_ACID
      #     oneOutput: "PUBCHEM.COMPOUND:3300276"  ## 1-palmitoyl-GPG (16:0)*
    PUBCHEM-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:194501"  ## 3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**
      #     oneOutput: "CHEBI:61330"  ## EPA
    PUBCHEM-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:61330"  ## EPA
      #     oneOutput: "PUBCHEM.COMPOUND:194501"  ## 3-carboxy-4-methyl-5-pentyl-2-furanpropionate (3-CMPFP)**
    PUBCHEM-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:102212"  ## 2'-O-methyluridine
      #     oneOutput: "KEGG.COMPOUND:C01879"  ## 5-oxoproline
    PUBCHEM-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C01879"  ## 5-oxoproline
      #     oneOutput: "PUBCHEM.COMPOUND:102212"  ## 2'-O-methyluridine
    PUBCHEM-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:11425365"  ## ascorbic acid 3-sulfate*
      #     oneOutput: "PUBCHEM.COMPOUND:151731"  ## palmitoylcholine
    PUBCHEM-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:151731"  ## palmitoylcholine
      #     oneOutput: "PUBCHEM.COMPOUND:11425365"  ## ascorbic acid 3-sulfate*
    PUBCHEM-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
      #     oneOutput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
    PUBCHEM-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
      #     oneOutput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
    PUBCHEM-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
      #     oneOutput: "CAS:251981-06-3"  ## octadecenedioylcarnitine (C18:1-DC)*
    PUBCHEM-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:251981-06-3"  ## octadecenedioylcarnitine (C18:1-DC)*
      #     oneOutput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
    PUBCHEM-KEGGDRUG:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:3983"  ## 1-palmityl-GPC (O-16:0)
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    PUBCHEM-KEGGDRUG-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "PUBCHEM.COMPOUND:3983"  ## 1-palmityl-GPC (O-16:0)
## NOTE: no PUBCHEM-MESH, PUBCHEM-MESH-Rev
    PUBCHEM-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.PUBCHEM", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
      #     oneOutput: "UniProtKB:Q07011"  ## INF_Q07011
    PUBCHEM-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.PUBCHEM AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:Q07011"  ## INF_Q07011
      #     oneOutput: "PUBCHEM.COMPOUND:10981970"  ## C-glycosyltryptophan
## note: there are no records with subject.PUBCHEM and related_to. There are 80 records with object.PUBCHEM and related_to
    HMDB-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
      #     oneOutput: "LOINC:13965-9"  ## HOMOCYSTEINE, SERUM
    HMDB-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:13965-9"  ## HOMOCYSTEINE, SERUM
      #     oneOutput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
    HMDB-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB07984"  ## 1-palmitoyl-2-eicosapentaenoyl-GPC (16:0/20:5)*
      #     oneOutput: "NCIT:C615"  ## LINOLEIC_ACID
    HMDB-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C615"  ## LINOLEIC_ACID
      #     oneOutput: "HMDB:HMDB07984"  ## 1-palmitoyl-2-eicosapentaenoyl-GPC (16:0/20:5)*
    HMDB-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB07988"  ## 1-palmitoyl-2-adrenoyl-GPC (16:0/22:4)*
      #     oneOutput: "CHEBI:78060"  ## DHA
    HMDB-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78060"  ## DHA
      #     oneOutput: "HMDB:HMDB07988"  ## 1-palmitoyl-2-adrenoyl-GPC (16:0/22:4)*
    HMDB-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
      #     oneOutput: "KEGG.COMPOUND:C00020"  ## adenosine 5'-monophosphate (AMP)
    HMDB-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00020"  ## adenosine 5'-monophosphate (AMP)
      #     oneOutput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
    HMDB-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
      #     oneOutput: "PUBCHEM.COMPOUND:151492"  ## 3-hydroxyhexanoate
    HMDB-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:151492"  ## 3-hydroxyhexanoate
      #     oneOutput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
    HMDB-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
      #     oneOutput: "HMDB:HMDB00705"  ## hexanoylcarnitine (C6)
    HMDB-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00705"  ## hexanoylcarnitine (C6)
      #     oneOutput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
    HMDB-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00529"  ## 5-dodecenoate (12:1n7)
      #     oneOutput: "CAS:98930-66-6"  ## cis-4-decenoylcarnitine (C10:1)
    HMDB-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:98930-66-6"  ## cis-4-decenoylcarnitine (C10:1)
      #     oneOutput: "HMDB:HMDB00529"  ## 5-dodecenoate (12:1n7)
    HMDB-KEGGDRUG:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB60564"  ## carboxyibuprofen
      #     oneOutput: "KEGG.DRUG:D00126"  ## ibuprofen
    HMDB-KEGGDRUG-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D00126"  ## ibuprofen
      #     oneOutput: "HMDB:HMDB60564"  ## carboxyibuprofen
## NOTE: no HMDB-MESH, HMDB-MESH-Rev
    HMDB-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.HMDB", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
      #     oneOutput: "UniProtKB:P01241"  ## CVD2_P01241
    HMDB-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.HMDB AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P01241"  ## CVD2_P01241
      #     oneOutput: "HMDB:HMDB00317"  ## 2-hydroxy-3-methylvalerate
## note: there are no records with subject.HMDB and related_to. There are 149 records with object.HMDB and related_to
    KEGGDRUG-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "LOINC:44733-4"  ## Triglyceride HDL Ratio
    KEGGDRUG-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:44733-4"  ## Triglyceride HDL Ratio
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
## no KEGGDRUG-NCIT, KEGGDRUG-NCIT-Rev records
## no KEGGDRUG-CHEBI, KEGGDRUG-CHEBI-Rev records
    KEGGDRUG-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "KEGG.COMPOUND:C00187"  ## cholesterol
    KEGGDRUG-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00187"  ## cholesterol
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    KEGGDRUG-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "PUBCHEM.COMPOUND:145911"  ## 1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*
    KEGGDRUG-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:145911"  ## 1-palmityl-2-palmitoyl-GPC (O-16:0/16:0)*
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    KEGGDRUG-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "HMDB:HMDB00848"  ## stearoylcarnitine (C18)
    KEGGDRUG-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00848"  ## stearoylcarnitine (C18)
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
    KEGGDRUG-CAS:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "CAS:4201-62-1"  ## lactosyl-N-palmitoyl-sphingosine (d18:1/16:0)
    KEGGDRUG-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:4201-62-1"  ## lactosyl-N-palmitoyl-sphingosine (d18:1/16:0)
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
## NOTE: no KEGGDRUG-KEGGDRUG, KEGGDRUG-KEGGDRUG-Rev
## NOTE: no KEGGDRUG-MESH, KEGGDRUG-MESH-Rev
    KEGGDRUG-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.KEGG_DRUG", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
      #     oneOutput: "UniProtKB:P08833"  ## CVD3_P08833
    KEGGDRUG-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.KEGG_DRUG AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P08833"  ## CVD3_P08833
      #     oneOutput: "KEGG.DRUG:D03585"  ## 1,2-dipalmitoyl-GPC (16:0/16:0)
## note: there are no records with subject.KEGG_DRUG and related_to. There are 19 records with object.KEGG_DRUG and related_to
    CAS-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
      #     oneOutput: "LOINC:30522-7"  ## CRP HIGH SENSITIVITY
    CAS-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:30522-7"  ## CRP HIGH SENSITIVITY
      #     oneOutput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
## no CAS-NCIT
## no CAS-CHEBI 
    CAS-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:105450-08-6"  ## benzoylcarnitine*
      #     oneOutput: "KEGG.COMPOUND:C00090"  ## catechol sulfate
    CAS-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00090"  ## catechol sulfate
      #     oneOutput: "CAS:105450-08-6"  ## benzoylcarnitine*
    CAS-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:251981-06-3"  ## octadecenedioylcarnitine (C18:1-DC)*
      #     oneOutput: "PUBCHEM.COMPOUND:134508"  ## pyroglutamine*
    CAS-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:134508"  ## pyroglutamine*
      #     oneOutput: "CAS:251981-06-3"  ## octadecenedioylcarnitine (C18:1-DC)*
    CAS-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:105450-08-6"  ## benzoylcarnitine*
      #     oneOutput: "HMDB:HMDB00613"  ## erythronate*
    CAS-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00613"  ## erythronate*
      #     oneOutput: "CAS:105450-08-6"  ## benzoylcarnitine*
    CAS-CAS:
   ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:121999-58-4"  ## sphingomyelin (d17:1/16:0, d18:1/15:0, d16:1/17:0)*
      #     oneOutput: "CAS:121999-64-2"  ## sphingomyelin (d18:1/17:0, d17:1/18:0, d19:1/16:0)
    CAS-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:121999-64-2"  ## sphingomyelin (d18:1/17:0, d17:1/18:0, d19:1/16:0)
      #     oneOutput: "CAS:121999-58-4"  ## sphingomyelin (d17:1/16:0, d18:1/15:0, d16:1/17:0)*
## NOTE: no CAS-KEGGDRUG
## NOTE: no CAS-MESH, CAS-MESH-Rev
    CAS-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.CAS", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
      #     oneOutput: "UniProtKB:P41159"  ## CVD2_P41159
    CAS-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.CAS AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P41159"  ## CVD2_P41159
      #     oneOutput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
## note: there are no records with subject.CAS and related_to. There are 12 records with object.CAS and related_to
    MESH-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.MESH AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: MESH
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.MESH", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "MESH:D013482"  ## SUPEROX DISMUT SOD
      #     oneOutput: "LOINC:3074-2"  ## TNF-ALPHA
    MESH-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.MESH AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: MESH
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.MESH,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/MESH-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:3074-2"  ## TNF-ALPHA
      #     oneOutput: "MESH:D013482"  ## SUPEROX DISMUT SOD
  ## note: no MESH-NCIT 
  ## note: no MESH-CHEBI 
    MESH-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.MESH AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: MESH
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.MESH", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "MESH:D013482"  ## SUPEROX DISMUT SOD
      #     oneOutput: "KEGG.COMPOUND:C05282"  ## gamma-glutamylglutamate
    MESH-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.MESH AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: MESH
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          subject.MESH,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/MESH-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C05282"  ## gamma-glutamylglutamate
      #     oneOutput: "MESH:D013482"  ## SUPEROX DISMUT SOD
  ## note: no MESH-PUBCHEM 
  ## note: no MESH-HMDB 
  ## note: no MESH-CAS 
  ## note: no MESH-KEGGDRUG 
  ## note: no MESH-MESH 
  ## note: no MESH-UniProtKB 
    UniProtKB-LOINC:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "LOINC:20448-7"  ## INSULIN
    UniProtKB-LOINC-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:20448-7"  ## INSULIN
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
    UniProtKB-NCIT:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P01130"  ## CVD3_P01130
      #     oneOutput: "NCIT:C2563"  ## OMEGA_6_TOTAL
    UniProtKB-NCIT-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C2563"  ## OMEGA_6_TOTAL
      #     oneOutput: "UniProtKB:P01130"  ## CVD3_P01130
    UniProtKB-CHEBI:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:  ## HAS PREFIX
        fields: >-
          object.CHEBI,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CHEBI'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "CHEBI:78060"  ## DHA
    UniProtKB-CHEBI-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CHEBI
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## HAS PREFIX
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.CHEBI", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CHEBI:78060"  ## DHA
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
    UniProtKB-KEGGCOMPOUND:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "KEGG.COMPOUND:C00366"  ## urate
    UniProtKB-KEGGCOMPOUND-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00366"  ## urate
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
    UniProtKB-PUBCHEM:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "PUBCHEM.COMPOUND:14274897"  ## N,N,N-trimethyl-5-aminovalerate
    UniProtKB-PUBCHEM-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:14274897"  ## N,N,N-trimethyl-5-aminovalerate
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
    UniProtKB-HMDB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
    UniProtKB-HMDB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00215"  ## N-acetylglucosamine/N-acetylgalactosamine
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
    UniProtKB-CAS:
   ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00182"  ## CVD2_O00182
      #     oneOutput: "CAS:1247-64-9"  ## pregnenediol sulfate (C21H34O5S)*
    UniProtKB-CAS-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1247-64-9"  ## pregnenediol sulfate (C21H34O5S)*
      #     oneOutput: "UniProtKB:O00182"  ## CVD2_O00182
## NOTE: no UniProtKB-KEGGDRUG 
## NOTE: no UniProtKB-MESH
    UniProtKB-UniProtKB:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00175"  ## CVD3_O00175
      #     oneOutput: "UniProtKB:O15467"  ## CVD3_O15467
    UniProtKB-UniProtKB-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:correlated_with AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","correlated_with","Protein"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: correlated_with
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O15467"  ## CVD3_O15467
      #     oneOutput: "UniProtKB:O00175"  ## CVD3_O00175
    UniProtKB-LOINC-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: LOINC
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.LOINC,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/LOINC'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "LOINC:43727-7"  ## LDL SMALL
    UniProtKB-LOINC-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.LOINC
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: LOINC
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.LOINC", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "LOINC:43727-7"  ## LDL SMALL
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
    UniProtKB-NCIT-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","ClinicalFinding"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: NCIT
        semantic: ClinicalFinding
      parameters:  ## no prefix
        fields: >-
          object.NCIT,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/NCIT'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "NCIT:C615"  ## LINOLEIC_ACID
    UniProtKB-NCIT-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:ClinicalFinding AND _exists_:object.NCIT
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: NCIT
        semantic: ClinicalFinding
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | rmPrefix() | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.NCIT", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "NCIT:C615"  ## LINOLEIC_ACID
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
## NO UniProtKB-CHEBI-related / UniProtKB-CHEBI-related-Rev records
    UniProtKB-KEGGCOMPOUND-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_COMPOUND,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGCOMPOUND'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "KEGG.COMPOUND:C00090"  ## catechol sulfate
    UniProtKB-KEGGCOMPOUND-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_COMPOUND
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.KEGG_COMPOUND", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.COMPOUND:C00090"  ## catechol sulfate
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
    UniProtKB-PUBCHEM-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.PUBCHEM,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/PUBCHEM'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "PUBCHEM.COMPOUND:11425365"  ## ascorbic acid 3-sulfate*
    UniProtKB-PUBCHEM-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.PUBCHEM
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "PUBCHEM.COMPOUND"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.PUBCHEM", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "PUBCHEM.COMPOUND:11425365"  ## ascorbic acid 3-sulfate*
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
    UniProtKB-HMDB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: HMDB
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.HMDB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/HMDB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "HMDB:HMDB00387"  ## 3-hydroxylaurate
    UniProtKB-HMDB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.HMDB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: HMDB
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.HMDB", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "HMDB:HMDB00387"  ## 3-hydroxylaurate
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
    UniProtKB-CAS-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: CAS
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.CAS,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/CAS'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
    UniProtKB-CAS-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.CAS
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: CAS
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.CAS", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "CAS:1955-23-3"  ## 3-hydroxypyridine sulfate
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
    UniProtKB-KEGGDRUG-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","MolecularEntity"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      parameters:  ## no prefix
        fields: >-
          object.KEGG_DRUG,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/KEGGDRUG'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "KEGG.DRUG:D00285"  ## sulfamethoxazole
    UniProtKB-KEGGDRUG-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:MolecularEntity AND _exists_:object.KEGG_DRUG
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: "KEGG.DRUG"
        semantic: SmallMolecule
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.KEGG_DRUG", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "KEGG.DRUG:D00285"  ## sulfamethoxazole
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
## NOTE: no UniProtKB-MESH-related, UniProtKB-MESH-related-Rev
    UniProtKB-UniProtKB-related:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["subject.UniProtKB", "predicate.type", "object.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          object.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:P05231"  ## ONC2_P05231
      #     oneOutput: "UniProtKB:O00175"  ## CVD3_O00175
    UniProtKB-UniProtKB-related-Rev:
    ## https://pending.biothings.io/multiomics_wellness_kp/query?q=_exists_:subject.UniProtKB AND predicate.type:related_to AND object.type:Protein AND _exists_:object.UniProtKB
    - supportBatch: true
      useTemplating: True
      inputs:
      - id: UniProtKB
        semantic: Gene
      requestBodyType: object
      requestBody:  ## no prefix
        body: >-
          {"q": [ {{ queryInputs | wrap( '["', '","related_to","Protein"]' ) }} ],
          "scopes": ["object.UniProtKB", "predicate.type", "subject.type"]}
      outputs:
      - id: UniProtKB
        semantic: Gene
      parameters:  ## no prefix
        fields: >-
          subject.UniProtKB,
          predicate.N,
          predicate.bonferroni_pval,
          predicate.weighted_pvalue,
          predicate.strength_of_relationship,
          predicate.type_of_relationship,
          predicate.qualifier,
          predicate.qualifier_value,
          predicate.provenance,
          subject.id,
          subject.name,
          predicate.relation,
          object.id,
          object.name
        size: 1000
      predicate: related_to
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/UniProtKB-rev'
      # source: 'Multiomics Provider: Wellness'
      # testExamples:
      #   - qInput: "UniProtKB:O00175"  ## CVD3_O00175
      #     oneOutput: "UniProtKB:P05231"  ## ONC2_P05231
  x-bte-response-mapping:
    LOINC:
      LOINC: object.LOINC  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    LOINC-rev:
      LOINC: subject.LOINC  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    NCIT:
      NCIT: object.NCIT  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    NCIT-rev:
      NCIT: subject.NCIT  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    CHEBI:
      CHEBI: object.CHEBI  ## HAS PREFIX
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    CHEBI-rev:
      CHEBI: subject.CHEBI  ## HAS PREFIX
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    KEGGCOMPOUND:
      "KEGG.COMPOUND": object.KEGG_COMPOUND  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    KEGGCOMPOUND-rev:
      "KEGG.COMPOUND": subject.KEGG_COMPOUND  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    PUBCHEM:
      "PUBCHEM.COMPOUND": object.PUBCHEM  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    PUBCHEM-rev:
      "PUBCHEM.COMPOUND": subject.PUBCHEM  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    HMDB:
      HMDB: object.HMDB  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    HMDB-rev:
      HMDB: subject.HMDB  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    CAS:
      CAS: object.CAS  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    CAS-rev:
      CAS: subject.CAS  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    KEGGDRUG:
      "KEGG.DRUG": object.KEGG_DRUG  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    KEGGDRUG-rev:
      "KEGG.DRUG": subject.KEGG_DRUG  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    MESH:
      MESH: object.MESH  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    MESH-rev:
      MESH: subject.MESH  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    UniProtKB:
      UniProtKB: object.UniProtKB  ## no prefix
      input_name: subject.name
      output_name: object.name
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
    UniProtKB-rev:
      UniProtKB: subject.UniProtKB  ## no prefix
      input_name: object.name  ## NOTE THE REVERSAL
      output_name: subject.name 
      count: predicate.N
      bonferroni_pval: predicate.bonferroni_pval
      weighted_pvalue: predicate.weighted_pvalue
      strength_of_relationship: predicate.strength_of_relationship
      method: predicate.type_of_relationship
      qualifier: predicate.qualifier
      qualifier-label: predicate.qualifier_value
      provenance-url: predicate.provenance
      "biolink:original_subject": subject.id
      "biolink:original_predicate": predicate.relation
      "biolink:original_object": object.id
